[general]
; GENERAL PHPMUSSEL CONFIGURATION.
; As a convenience, phpMussel will allow certain functions (including the
; ability to update phpMussel on-the-fly) to be manually triggered via POST,
; GET and QUERY. However, as a security precaution, to do this, phpMussel will
; expect a password to be included with the command, as to ensure that it is
; you, and not someone else, attempting to manually trigger these functions.
; Set whatever password you would like to use here. If no password is set,
; manual triggering will be disabled by default. Use something you'll remember
; but which is hard for others to guess. Refer to documentation for a complete
; list of available commands.
script_password=''
; The same as above, but for viewing the contents of scan_log and scan_kills.
; Having separate passwords can be useful if you want to give someone else
; accessing to one set of functions but not the other. Refer to documentation
; for a complete list of available commands.
logs_password=''
; Unset variables and cache used by the script after the initial upload
; scanning? False = No; True = Yes [Default]. If you -aren't- using the script
; beyond the initial scanning of uploads, you should set this to "true" (yes),
; to minimize memory usage. If you -are- using the script beyond the initial
; scanning of uploads, should set to "false" (no), to avoid unnecessarily
; reloading duplicate data into memory. In general practice, it should usually
; be set to "true", but, if you do this, you won't be able to use the script
; for anything other than the initial file upload scanning.
cleanup=true
; Log the results of all scanning to a file? If yes, specify the name of the
; file to log results to. If no, leave this variable blank.
; Useful tip: If you want, you can append date/time information to the name of
; your logfile by including these in the name: {yyyy} for complete year, {yy}
; for abbreviated year, {mm} for month, {dd} for day, {hh} for hour.
; Example: logfile='logfile.{yyyy}-{mm}-{dd}.txt'
scan_log='scan_log.txt'
; Log the results of all scanning to a file, in a serialised format? If yes,
; specify the name of the file to log serialised results to. If no, leave this
; variable blank.
; Useful tip: If you want, you can append date/time information to the name of
; your logfile by including these in the name: {yyyy} for complete year, {yy}
; for abbreviated year, {mm} for month, {dd} for day, {hh} for hour.
; Example: logfile='logfile.{yyyy}-{mm}-{dd}.txt'
scan_log_serialized='scan_log_serialized.txt'
; Log the results of all blocked or killed uploads to a file? If yes, specify
; the name of the file to log results to. If no, leave this variable blank.
; Useful tip: If you want, you can append date/time information to the name of
; your logfile by including these in the name: {yyyy} for complete year, {yy}
; for abbreviated year, {mm} for month, {dd} for day, {hh} for hour.
; Example: logfile='logfile.{yyyy}-{mm}-{dd}.txt'
scan_kills='scan_kills.txt'
; If your server time doesn't match your local time, you can specify an offset
; here to adjust the date/time information generated by CIDRAM according to
; your needs. It's generally recommended instead to adjust the timezone
; directive in your "php.ini" file, but sometimes (such as when working with
; limited shared hosting providers) this isn't always possible to do, and so,
; this option is provided here. Offset is in minutes.
; Example (to add one hour): timeOffset=60
timeOffset=0
; Where to find IP address of connecting request? (Useful for services such as
; Cloudflare and the likes) Default = REMOTE_ADDR
; WARNING: Don't change this unless you know what you're doing!
ipaddr='REMOTE_ADDR'
; Enable support for phpMussel plugins? False = No; True = Yes [Default].
enable_plugins=true
; Should phpMussel send 403 headers with the file upload blocked message, or
; stick with the usual 200 OK? False = No (200) [Default]; True = Yes (403).
forbid_on_block=false
; Enabling this directive will instruct the script to attempt to immediately
; delete any scanned attempted file upload matching any detection criteria,
; whether via signatures or otherwise. Files considered as "clean" won't be
; touched. In the case of archives, the entire archive will be deleted,
; regardless of whether or not the offending file is only one of several files
; contained within the archive. For the case of file upload scanning, usually,
; it isn't necessary to enable this directive, because usually, php will
; automatically purge the contents of its cache when execution has finished,
; meaning it'll usually delete any files uploaded through it to the server
; unless they've been moved, copied or deleted already. This directive is added
; here as an extra measure of security for those whose copies of php mightn't
; always behave in the manner expected.
; False = After scanning, leave the file alone [Default],
; True = After scanning, if not clean, delete immediately.
delete_on_sight=false
; Specify here which language to use for phpMussel browser output, CLI output
; and logging. README documentation available for all supported languages
; unless otherwise denoted (*README only partially available; **README not yet
; available). Available at this time:
; en - English;
; ar - Arabic;
; de - German;
; es - Spanish;
; fr - French;
; id - Indonesian;
; it - Italian;
; ja - **Japanese;
; nl - Dutch;
; pt - Portuguese;
; ru - Russian;
; vi - *Vietnamese;
; zh - Chinese (Simplified);
; zh-TW - Chinese (Traditional).
lang='en'
; Should phpMussel, when possible, override the language specification with the
; language preference declared by inbound requests (HTTP_ACCEPT_LANGUAGE)?
; False = No [Default]; True = Yes. (WARNING: The "lang_override" directive is
; bugged at the moment; Repeated scans can sometimes spit out results using an
; incorrect language; I'll fix this soon, but for now, I'd recommend just
; leaving it disabled; I'll remove this warning when the bug is fixed).
lang_override=false
; The "lang_acceptable" directive tells phpMussel which languages may be
; accepted by the script from "lang" or from "HTTP_ACCEPT_LANGUAGE". This
; directive should -only- be modified if you're adding your own customised
; language files or forcibly removing language files. The directive is a comma
; delimited string of the codes used by those languages accepted by the script.
lang_acceptable='en,ar,de,es,fr,id,it,ja,nl,pt,ru,vi,zh,zh-TW'
; phpMussel is able to quarantine flagged attempted file uploads in isolation
; within the phpMussel vault, if this is something you want it to do. Casual
; users of phpMussel that simply wish to protect their websites or hosting
; environment without having any interest in deeply analysing any flagged
; attempted file uploads should leave this functionality disabled, but any
; users interested in further analysis of flagged attempted file uploads for
; malware research or for similar such things should enable this functionality.
; Quarantining of flagged attempted file uploads can sometimes also assist in
; debugging false-positives, if this is something that frequently occurs for
; you. To disable quarantine functionality, simply leave the "quarantine_key"
; directive empty, or erase the contents of that directive if it isn't already
; empty. To enable quarantine functionality, enter some value into the
; directive. The "quarantine_key" is an important security feature of the
; quarantine functionality required as a means of preventing the quarantine
; functionality from being exploited by potential attackers and as a means of
; preventing any potential execution of data stored within the quarantine.
; The "quarantine_key" should be treated in the same manner as your passwords:
; The longer the better, and guard it tightly. For best effect, use in
; conjunction with "delete_on_sight".
quarantine_key=''
; The maximum allowable filesize of files to be quarantined. Files larger than
; the value specified below WON'T be quarantined. This directive is important
; as a means of making it more difficult for any potential attackers to flood
; your quarantine with unwanted data potentially causing run-away data usage on
; your hosting service. Value is in KB. Default =2048 =2048KB =2MB.
quarantine_max_filesize=2048
; The maximum memory usage allowed for the quarantine. If the total memory
; used by the quarantine reaches this value, the oldest quarantined files will
; be deleted until the total memory used no longer reaches this value. This
; directive is important as a means of making it more difficult for any
; potential attackers to flood your quarantine with unwanted data potentially
; causing run-away data usage on your hosting service. Value is in KB.
; Default =65536 =65536KB =64MB.
quarantine_max_usage=65536
; When honeypot mode is enabled, phpMussel will attempt to quarantine every
; single file upload that it encounters, regardless of whether or not the file
; being uploaded matches any included signatures, and no actual scanning or
; analysis of those attempted file uploads will actually occur. This
; functionality should be useful for those that wish to use phpMussel for the
; purposes of virus/malware research, but it's neither recommended to enable
; this functionality if the intended use of phpMussel by the user is for actual
; file upload scanning nor recommended to use the honeypot functionality for
; purposes other than honeypotting. By default, this option is disabled.
; False = Disabled [Default]; True = Enabled.
honeypot_mode=false
; For how long should phpMussel cache the results of scanning? Value is the
; number of seconds to cache the results of scanning for. Default is 21600
; seconds (6 hours); A value of 0 will disable caching the results of scanning.
scan_cache_expiry=21600
; Disable CLI mode? CLI mode is enabled by default, but can sometimes interfere
; with certain testing tools (such as PHPUnit, for example) and other CLI-based
; applications. If you don't need to disable CLI mode, you should ignore this
; directive. False = Enable CLI mode [Default]; True = Disable CLI mode.
disable_cli=false

[signatures]
; SIGNATURES CONFIGURATION.
; %%%_clamav = ClamAV signatures (both mains and daily).
; %%%_custom = Your custom signatures (if you've written any).
; %%%_mussel = Any signatures included in your current signatures set that
;              aren't from ClamAV.
; Check against MD5 signatures when scanning?
; False = No; True = Yes [Default].
md5_clamav=true
md5_custom=true
md5_mussel=true
; Check against general signatures when scanning?
; False = No; True = Yes [Default].
general_clamav=true
general_custom=true
general_mussel=true
; Check against normalised ASCII signatures when scanning?
; False = No; True = Yes [Default].
ascii_clamav=true
ascii_custom=true
ascii_mussel=true
; Check against normalised HTML signatures when scanning?
; False = No; True = Yes [Default].
html_clamav=true
html_custom=true
html_mussel=true
; Check PE (portable executable) sections against PE Sectional signatures when
; scanning? False = No; True = Yes [Default].
pe_clamav=true
pe_custom=true
pe_mussel=true
; Check PE (portable executable) files (EXE, DLL, etc) against PE extended
; signatures when scanning? False = No; True = Yes [Default].
pex_custom=true
pex_mussel=true
; Check PE (portable executable) files (EXE, DLL, etc) against PE signatures
; when scanning? False = No; True = Yes [Default].
exe_clamav=true
exe_custom=true
exe_mussel=true
; Check ELF files against ELF signatures when scanning?
; False = No; True = Yes [Default].
elf_clamav=true
elf_custom=true
elf_mussel=true
; Check Mach-O files (OSX, etc) against Mach-O signatures when scanning?
; False = No; True = Yes [Default].
macho_clamav=true
macho_custom=true
macho_mussel=true
; Check graphics files against graphics based signatures when scanning?
; False = No; True = Yes [Default].
graphics_clamav=true
graphics_custom=true
graphics_mussel=true
; Check archive contents against archive metadata signatures when scanning?
; False = No; True = Yes [Default].
metadata_clamav=true
metadata_custom=true
metadata_mussel=true
; Check OLE objects against OLE object signatures when scanning?
; False = No; True = Yes [Default].
ole_clamav=true
ole_custom=true
ole_mussel=true
; Check filenames against filename based signatures when scanning?
; False = No; True = Yes [Default].
filenames_clamav=true
filenames_custom=true
filenames_mussel=true
; Check against email signatures when scanning?
; False = No; True = Yes [Default].
mail_clamav=true
mail_custom=true
mail_mussel=true
; Enable file specific whitelist? False = No; True = Yes [Default].
whitelist_clamav=true
whitelist_custom=true
whitelist_mussel=true
; Check XML/XDP chunks against XML/XDP-chunk signatures when scanning?
; False = No; True = Yes [Default].
xmlxdp_clamav=true
xmlxdp_custom=true
xmlxdp_mussel=true
; Check against Complex Extended (CoEx) signatures when scanning?
; False = No; True = Yes [Default].
coex_clamav=true
coex_custom=true
coex_mussel=true
; Check against PDF signatures when scanning?
; False = No; True = Yes [Default].
pdf_clamav=true
pdf_custom=true
pdf_mussel=true
; Check against Shockwave signatures when scanning?
; False = No; True = Yes [Default].
swf_clamav=true
swf_custom=true
swf_mussel=true
; Signature matching length limiting options. Only change these if you know
; what you're doing. SD = Standard signatures.
; RX = PCRE (Perl Compatible Regular Expressions, or "Regex") signatures.
; FN = Filename signatures. If you notice php crashing when phpMussel attempts
; to scan, try lowering the "max" values below. If possible and convenient, let
; me know when this happens and the results of whatever you try.
fn_siglen_min=2
fn_siglen_max=512
rx_siglen_min=4
rx_siglen_max=1024
sd_siglen_min=4
sd_siglen_max=1024
; Should phpMussel report when signatures files are missing or corrupted? If
; fail_silently is disabled, missing and corrupted files will be reported on
; scanning, and if fail_silently is enabled, missing and corrupted files will
; be ignored, with scanning reporting for those files that there aren't any
; problems. This should generally be left alone unless you're experiencing
; crashes or similar problems. False = Disabled; True = Enabled [Default].
fail_silently=true
; Should phpMussel report when extensions are missing? If
; fail_extensions_silently is disabled, missing extensions will be reported on
; scanning, and if fail_extensions_silently is enabled, missing extensions will
; be ignored, with scanning reporting for those files that there aren't any
; problems. Disabling this directive may potentially increase your security,
; but may also lead to an increase of false positives.
; False = Disabled; True = Enabled [Default].
fail_extensions_silently=true
; Should phpMussel parse signatures for detecting adware?
; False = No; True = Yes [Default].
detect_adware=true
; Should phpMussel parse signatures for detecting joke/hoax malware/viruses?
; False = No; True = Yes [Default].
detect_joke_hoax=true
; Should phpMussel parse signatures for detecting PUAs/PUPs?
; False = No; True = Yes [Default].
detect_pua_pup=true
; Should phpMussel parse signatures for detecting packers and packed data?
; False = No; True = Yes [Default].
detect_packer_packed=true
; Should phpMussel parse signatures for detecting shell scripts?
; False = No; True = Yes [Default].
detect_shell=true
; Should phpMussel parse signatures for detecting defacements and defacers?
; False = No; True = Yes [Default].
detect_deface=true

[files]
; FILE HANDLING DIRECTIVES.
; Maximum allowable number of files to scan during files upload scan before
; aborting the scan and informing the user they are uploading too much at once!
; Provides protection against a theoretical attack whereby an attacker attempts
; to DDoS your system or CMS by overloading phpMussel to slow down the php
; process to a grinding halt. Recommended: 10. You may wish to raise or lower
; this number depending on the speed of your hardware. Note that this number
; does not account for or include the contents of archives.
max_uploads=10
; Filesize limit in KB. 65536 = 64MB [Default]; 0 = No limit (always
; greylisted), any (positive) numeric value accepted. This can be useful when
; your php configuration limits the amount of memory a process can hold or if
; your php configuration limits filesize of uploads.
filesize_limit=65536
; What to do with files that exceed the filesize limit (if one exists)?
; False = Whitelist; True = Blacklist [Default].
filesize_response=true
; If your system only allows specific types of files to be uploaded, or if your
; system explicitly denies certain types of files, specifying those filetypes
; in whitelists, blacklists and greylists can increase the speed at which
; scanning is performed by allowing the script to skip over certain filetypes.
; Format is CSV (comma separated values). If you want to scan everything,
; rather than whitelist, blacklist or greylist, leave the variable(/s) blank;
; Doing so will disable whitelist/blacklist/greylist. Logical order of
; processing is:
; - If the filetype is whitelisted, don't scan and don't block the file, and
;   don't check the file against the blacklist or the greylist.
; - If the filetype is blacklisted, don't scan the file but block it anyway,
;   and don't check the file against the greylist.
; - If the greylist is empty or if the greylist is not empty and the filetype
;   is greylisted, scan the file as per normal and determine whether to block
;   it based on the results of the scan, but if the greylist is not empty and
;   the filetype is not greylisted, treat the file as blacklisted, therefore
;   not scanning it but blocking it anyway.
; Example Whitelist (default is blank):
;    filetype_whitelist='7z,avi,css,doc,docm,docx,dot,dotm,dotx,fodg,fodp,fods,fodt,gif,gz,htm,html,jpeg,jpg,js,mid,mp2,mp3,mp4,mpa,mpeg,mpg,odb,odc,odf,odg,odm,odp,ods,odt,ogg,otg,oth,otp,ots,ott,orp,pdf,png,pot,potm,potx,ppa,ppam,pps,ppsm,ppsx,ppt,pptm,pptx,rar,rmi,rtf,rtx,stm,svg,swf,tar,txt,utf,xhtml,xla,xlam,xls,xlsb,xlsm,xlsx,xlt,xltm,xltx,xls,xml,webp,wma,zip,wmv'
filetype_whitelist=''
; Default Blacklist:
;    filetype_blacklist='386,acc*,acm,act*,apk,app,ash*,asm*,asx*,ax,bat,bin,ccc,cgi,cmd,com*,cpl,cpp,csh,dll,drv,elf,exe,fxp,gad*,hta*,htp*,ico,inf,ins,inx,ipa,isu,job,js,jse,ksh,lnk,msc,msi,msp,mst,net,ocx,ops,org,osx,out,paf,php*,pif,pl,prg,ps1,reg,rgs,rs,run,scr*,sct,shb,shs,sql*,sys,u3p,url,vb,vbe,vbs*,wor*,ws,wsf,xsl'
filetype_blacklist='386,acc*,acm,act*,apk,app,ash*,asm*,asx*,ax,bat,bin,ccc,cgi,cmd,com*,cpl,cpp,csh,dll,drv,elf,exe,fxp,gad*,hta*,htp*,ico,inf,ins,inx,ipa,isu,job,js,jse,ksh,lnk,msc,msi,msp,mst,net,ocx,ops,org,osx,out,paf,php*,pif,pl,prg,ps1,reg,rgs,rs,run,scr*,sct,shb,shs,sql*,sys,u3p,url,vb,vbe,vbs*,wor*,ws,wsf,xsl'
; Example Greylist (default is blank):
;    filetype_greylist='dot,dotm,dotx,gif,jpeg,jpg,pdf,png,pps,ppt,txt'
filetype_greylist=''
; Attempt to check the contents of archives?
; False = Don't check; True = Check [Default].
; - Currently, the only archive and compression formats supported are BZ/BZIP2,
;   GZ/GZIP, LZF, PHAR, TAR and ZIP (archive and compression formats RAR, CAB,
;   7z and etcetera not currently supported).
; - This is not foolproof! While I highly recommend keeping this turned on, I
;   can't guarantee it'll always find everything.
; - Also be aware that archive checking currently is not recursive for PHARs or
;   ZIPs.
check_archives=true
; Carry over filesize blacklisting/whitelisting to the contents of archives?
; False = No (just greylist everything); True = Yes [Default].
filesize_archives=true
; Carry over filetype blacklisting/whitelisting to the contents of archives?
; False = No (just greylist everything) [Default]; True = Yes.
filetype_archives=false
; Maximum recursion depth limit for archives? Default = 10.
max_recursion=10
; Detect and block encrypted archives? Because phpMussel isn't able to scan the
; contents of encrypted archives, it's possible that archive encryption may be
; employed by an attacker as a means of attempting to bypass phpMussel,
; anti-virus scanners and other such protections. Instructing phpMussel to
; block any archives that it discovers to be encrypted could potentially help
; reduce any risk associated with these such possibilities.
; False = No; True = Yes [Default].
block_encrypted_archives=true

[attack_specific]
; ATTACK-SPECIFIC DIRECTIVES.
; Chameleon attack detection. False = Off; True = On [Default].
; chameleon_from_php: Search for php header in files that are neither php
; files nor recognised archives.
chameleon_from_php=true
; chameleon_from_exe: Search for executable headers in files that are neither
; executables nor recognised archives and for executables whose headers are
; incorrect.
chameleon_from_exe=true
; chameleon_to_archive: Search for archives whose headers are incorrect
; (Supported: ZIP, RAR, GZ).
chameleon_to_archive=true
; chameleon_to_archive: Search for office documents whose headers are incorrect
; (Supported: DOC, DOT, PPS, PPT, XLA, XLS, WIZ).
chameleon_to_doc=true
; chameleon_to_img: Search for images whose headers are incorrect (Supported:
; BMP, DIB, PNG, GIF, JFI, JFIF, JIF, JP2, JPE, JPEG, JPG, XCF, PSD, PDD).
chameleon_to_img=true
; chameleon_to_pdf: Search for PDF files whose headers are incorrect.
chameleon_to_pdf=true
; Recognised archive file extensions (format is CSV; should only add or remove
; when problems occur; unnecessarily removing may cause false-positives to
; appear for archive files, whereas unnecessarily adding will essentially
; whitelist what you are adding from attack specific detection; modify with
; caution; also note that this has no effect on what archives can and can't be
; analysed at content-level). The list, as is at default, lists those formats
; used most commonly across the majority of systems and CMS, but intentionally
; isn't necessarily comprehensive.
archive_file_extensions='7z,a,ace,alz,apk,app,ar,arc,arj,ba,bh,bz,bz2,dmg,gz,ice,iso,lha,lz,lzh,lzo,lzw,lzx,mar,pak,pck,pea,phar,rar,rz,s7z,sea,sen,sfx,shar,sqx,tar,tgz,tlz,xar,xp3,xz,yz1,z,zz'
archive_file_extensions_wc='paq*,sit*,tbz*,zip*'
; Search content of files for general commands such as eval(), exec() and
; include()? False = Don't check [Default]; True = Check.
; Disable this option if you intend to upload any of the following to your
; system or CMS via your browser: php, JavaScript, HTML, python, perl files
; and etcetera. Enable this option if you don't have any additional protections
; on your system and do not intend to upload such files. If you use additional
; security in conjunction with phpMussel such as ZB Block, there's no need to
; turn this option on, because most of what phpMussel will look for (in the
; context of this directive) are duplications of protections that are
; already provided.
general_commands=false
; Block any files containing any control characters (other than newlines)?
; ([\x00-\x08\x0b\x0c\x0e\x1f\x7f]) If you are -only- uploading plain-text,
; then you can turn this option on to provide some additional protection to
; your system. However, if you upload anything other than plain-text, turning
; this on may result in false positives.
; False = Don't block [Default], True = Block.
block_control_characters=false
; Corrupted files and parse errors. false = Ignore; True = Block [Default].
; Detect and block potentially corrupted PE (portable executable) files? Often
; (but not always), when certain aspects of a PE file are corrupted or can't be
; parsed correctly, it can be indicative of a viral infection. The processes
; used by most anti-virus programs to detect viruses in PE files require
; parsing those files in certain ways, which, if the programmer of a virus is
; aware of, will specifically try to prevent, in order to allow their virus to
; remain undetected.
corrupted_exe=true
; Optional limitation or threshold to the length of raw data to which within
; decode commands should be detected (in case there are any noticeable
; performance issues while scanning). Value is an integer representing filesize
; in KB. Default = 512 (512KB). Zero or null value disables the threshold,
; removing any such limitation based on filesize.
decode_threshold=512
; Optional limitation or threshold to the length of raw data that phpMussel is
; permitted to read and scan (in case there are any noticeable performance
; issues while scanning). Value is an integer representing filesize in KB.
; Default = 32768 (32MB). Generally, this value shouldn't be less than the
; average filesize of file uploads that you want and expect to receive to your
; server or website, shouldn't be more than the filesize_limit directive, and
; shouldn't be more than roughly one fifth of the total allowable memory
; allocation granted to php via the php.ini configuration file. This directive
; exists to try to prevent phpMussel from using up too much memory (which would
; prevent it from being able to successfully scan files above a certain
; filesize).
scannable_threshold=32768

[compatibility]
; COMPATIBILITY DIRECTIVES.
; This directive should generally be disabled unless it's required for the
; correct functionality of phpMussel on your specific system. Normally, when
; disabled, when phpMussel detects the presence of elements in the $_FILES
; array(), it'll attempt to initiate a scan of the files that those elements
; represent, and, if those elements are blank or empty, phpMussel will return
; an error message. This is proper behaviour for phpMussel. However, for some
; CMS, empty elements in $_FILES can occur as a result of the natural behaviour
; of those CMS, or errors may be reported when there aren't any, in which case,
; the normal behaviour for phpMussel will be interfering with the normal
; behaviour of those CMS. If such a situation occurs for you, enabling this
; option will instruct phpMussel to not attempt to initiate scans for such
; empty elements, ignore them when found and to not return any related error
; messages, thus allowing continuation of the page request.
; False = OFF; True = ON.
ignore_upload_errors=false
; If you only expect or only intend to allow images to be uploaded to your
; system or CMS, and if you absolutely do not require any files other than
; images to be uploaded to your system or CMS, this directive should be
; enabled, but should otherwise be disabled. If this directive is enabled, it
; will instruct phpMussel to indiscriminately block any uploads identified as
; non-image files, without scanning them. This may reduce processing time and
; memory usage for attempted uploads of non-image files.
; False = OFF; True = ON.
only_allow_images=false

[heuristic]
; HEURISTIC DIRECTIVES.
; There are certain signatures of phpMussel that are intended to identify
; suspicious and potentially malicious qualities of files being uploaded
; without in themselves identifying those files being uploaded specifically as
; being malicious. This "threshold" value tells phpMussel what the maximum
; total weight of suspicious and potentially malicious qualities of files being
; uploaded that's allowable is before those files are to be flagged as
; malicious. The definition of weight in this context is the total number of
; suspicious and potentially malicious qualities identified. By default, this
; value will be set to 3. A lower value generally will result in a higher
; occurrence of false positives but a higher number of malicious files being
; flagged, whereas a higher value generally will result in a lower occurrence
; of false positives but a lower number of malicious files being flagged. It's
; generally best to leave this value at its default unless you're experiencing
; problems related to it.
threshold=3

[virustotal]
; VIRUSTOTAL.COM DIRECTIVES.
; Optionally, phpMussel is able to scan files using the Virus Total API as a
; way to provide a greatly enhanced level of protection against viruses,
; trojans, malware and other threats. By default, scanning files using the
; Virus Total API is disabled. To enable it, an API key from Virus Total is
; required. Due to the significant benefit that this could provide to you, it's
; something that I highly recommend enabling. Please be aware, however, that to
; use the Virus Total API, you -MUST- agree to their Terms of Service and you
; -MUST- adhere to all guidelines as per described by the Virus Total
; documentation! You are NOT permitted to use this integration feature UNLESS:
; A) You have read and agree to the Terms of Service of Virus Total and its
;    API. The Terms of Service of Virus Total and its API can be found here:
;    <https://www.virustotal.com/en/about/terms-of-service/>.
; B) You have read and you understand, at a minimum, the preamble of the Virus
;    Total Public API documentation (everything after 'VirusTotal Public API
;    v2.0' but before 'Contents'). The Virus Total Public API documentation can
;    be found here: <https://www.virustotal.com/en/documentation/public-api/>.
; Note: If scanning files using the Virus Total API is disabled, you won't need
; to review any of the directives in this category ("virustotal"), because none
; of them will do anything if this is disabled. To acquire a Virus Total API
; key, from anywhere on their website, click the 'Join our Community' link
; located towards the top-right of the page, enter in the information
; requested, and click 'Sign up' when done. Follow all instructions supplied,
; and when you've got your public API key, copy/paste that public API key to
; the directive below ("vt_public_api_key"):
vt_public_api_key=''
; By default, phpMussel will restrict which files it scans using the Virus
; Total API to those files that it considers 'suspicious'. You can optionally
; adjust this restriction by changing the value of this directive.
; 0 - Files are only considered suspicious if, upon being scanned by phpMussel
;     using its own signatures, they are deemed to carry a heuristic weight.
;     This would effectively mean that use of the Virus Total API would be for
;     a second opinion for when phpMussel suspects that a file may potentially
;     be malicious, but can't entirely rule out that it may also potentially be
;     benign (non-malicious) and therefore would otherwise normally not block
;     it or flag it as being malicious.
; 1 - Files are considered suspicious if, upon being scanned by phpMussel using
;     its own signatures, they are deemed to carry a heuristic weight, if
;     they're known to be executable (PE files, Mach-O files, ELF/Linux files,
;     etc), or if they're known to be of a format that could potentially
;     contain executable data (such as executable macros, DOC/DOCX files,
;     archive files such as RARs and ZIPS, and etc). This is the default and
;     recommended suspicion level to apply, effectively meaning that use of the
;     Virus Total API would be for a second opinion for when phpMussel doesn't
;     initially find anything malicious or wrong with a file that it considers
;     to be suspicious and therefore would otherwise normally not block it or
;     flag it as being malicious.
; 2 - All files are considered suspicious and should be scanned using the
;     Virus Total API. I don't generally recommend applying this suspicion
;     level, due to the risk of reaching your API quota much quicker than would
;     otherwise be the case, but there are certain circumstances (such as when
;     the webmaster or hostmaster has very little faith or trust whatsoever in
;     any of the uploaded content of their users) where this suspicion level
;     could be appropriate. With this suspicion level, all files not normally
;     blocked or flagged as being malicious would be scanned using the Virus
;     Total API. Note, however, that phpMussel will cease using the Virus Total
;     API when your API quota has been reached (regardless of suspicion level),
;     and that your quota will likely be reached much faster when using this
;     suspicion level.
; Note: Regardless of suspicion level, any files that are either blacklisted or
; whitelisted by phpMussel won't be scanned using the Virus Total API, because
; those such files would've already been declared as either malicious or benign
; by phpMussel by the time that they would've otherwise been scanned by the
; Virus Total API, and therefore, additionally scanning wouldn't be required.
; The ability of phpMussel to scan files using the Virus Total API is intended
; to build further confidence for whether a file is malicious or benign in
; those circumstances where phpMussel itself isn't entirely certain as to
; whether a file is malicious or benign.
vt_suspicion_level=1
; Should phpMussel apply the results of scanning using the Virus Total API as
; detections or as detection weighting? This directive exists, because,
; although scanning a file using multiple engines (as Virus Total does) should
; result in an increased detection rate (and therefore in a higher number of
; malicious files being caught), it can also result in a higher number of false
; positives, and therefore, in some circumstances, the results of scanning may
; be better utilised as a confidence score rather than as a definitive
; conclusion. If a value of 0 is used, the results of scanning using the Virus
; Total API will be applied as detections, and therefore, if any engine used by
; Virus Total flags the file being scanned as being malicious, phpMussel will
; consider the file to be malicious. If any other value is used, the results of
; scanning using the Virus Total API will be applied as detection weighting,
; and therefore, the number of engines used by Virus Total that flag the file
; being scanned as being malicious will serve as a confidence score (or
; detection weighting) for whether or not the file being scanned should be
; considered malicious by phpMussel (the value used will represent the minimum
; confidence score or weight required in order to be considered malicious). A
; value of 0 is used by default.
vt_weighting=0
; According to the Virus Total API documentation, "it is limited to at most 4
; requests of any nature in any given 1 minute time frame. If you run a
; honeyclient, honeypot or any other automation that is going to provide
; resources to VirusTotal and not only retrieve reports you are entitled to a
; higher request rate quota". By default, phpMussel will strictly abhere to
; these limitations, but due to the possibility of these rate quotas being
; increased, the two directives below are provided as a means for you to
; instruct phpMussel as to what limit it should adhere to. Unless you've been
; instructed to do so, it's not recommended for you to increase these values,
; but, if you've encountered problems relating to reaching your rate quota,
; decreases these values -may- sometimes help you in dealing with these
; problems. Your rate limit determined as "vt_quota_rate" requests of any
; nature in any given "vt_quota_time" minute time frame.
vt_quota_rate=4
vt_quota_time=1

[urlscanner]
; URL SCANNER CONFIGURATION.
; Built into phpMussel is a URL scanner, capable of detecting malicious URLs
; from within any data or files scanned. To enable the URL scanner, set the
; "urlscanner" directive to true; To disable it, set this directive to false.
urlscanner=true
; Note: If the URL scanner is disabled, you won't need to review any of the
; directives in this category ("urlscanner"), because none of them will do
; anything if this is disabled.
; URL SCANNER API LOOKUP CONFIGURATION.
; Enables API lookups to the hpHosts API <http://hosts-file.net/> when set to
; true. hpHosts doesn't require an API key for performing API lookups.
lookup_hphosts=true
; Enables API lookups to the Google Safe Browsing API when the necessary API
; key is defined. Google Safe Browsing API lookups requires an API key, which
; can be obtained from <https://console.developers.google.com/>.
; Note: The cURL extension is required in order to use this feature.
google_api_key=''
; Maximum allowable number of API lookups to perform per individual scan
; iteration. Because each additional API lookup will add to the total time
; required to complete each scan iteration, you may wish to stipulate a
; limitation in order to expediate the overall scan process. When set to 0, no
; such maximum allowable number will be applied. Set to 10 by default.
maximum_api_lookups=10
; What to do if the maximum allowable number of API lookups is exceeded?
; False = Do nothing (continue processing) [Default];
; True = Flag/block the file.
maximum_api_lookups_response=false
; How long (in seconds) should the results of API lookups be cached for?
; Default is 3600 seconds (1 hour).
cache_time=3600

[template_data]
; DIRECTIVES/VARIABLES FOR TEMPLATES AND THEMES.
; Template data relates to the HTML output used to generate the "Upload Denied"
; message displayed to users upon a file upload being blocked. If you're using
; custom themes for phpMussel, HTML output is sourced from the
; "template_custom.html" file, and otherwise, HTML output is sourced from the
; "template.html" file. Variables written to this section of the configuration
; file are parsed to the HTML output by way of replacing any variable names
; circumfixed by curly brackets found within the HTML output with the
; corresponding variable data. For example, where foo='bar', any instance of
; <p>{foo}</p> found within the HTML output will become <p>bar</p>.
; The template file for custom themes utilises external CSS properties, whereas
; the template file for the default theme utilises internal CSS properties. To
; instruct phpMussel to use the template file for custom themes, specify the
; public HTTP address of your custom theme's CSS files using the "css_url"
; variable. If you leave this variable blank, phpMussel will use the template
; file for the default theme.
css_url=''
